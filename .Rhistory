scale_y_continuous(breaks = 5:10)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 30),
legend.postion = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 30),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 30),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
paste(round(min_vec, 2))
)
paste(round(min_vec, 2))
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 30),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
"7.8 11.6, 4.5"
)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 30),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
paste("Slope:", min_vec[[1]])
)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 30),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
paste("Slope:", min_vec[[1]],
"Intercept:", min_vec[[2]])
)
mdl <- lm(
data = data,
len ~ dose
)
summary(mdl)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 30),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
paste("Slope:", min_vec[[1]],
"Intercept:", min_vec[[2]],
"RMSE:", min_vec[[3]])
)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 16),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
paste("Slope:", min_vec[[1]],
"Intercept:", min_vec[[2]],
"RMSE:", min_vec[[3]])
)
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 16),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
paste("Slope:", min_vec[[1]],
"Intercept:", min_vec[[2]],
"RMSE:", round(min_vec[[3]]),2)
)
summary(mdl)
pacman::p_load(
ggplot2,
tidyverse,
manipulate,
furrr
)
# make first with plot the with ggplot
ex1 <- function(intercept_, slope_){
data <- as_tibble(ToothGrowth) %>%
mutate(
intercept = intercept_,
slope = dose*slope_,
pred = intercept + slope,
mean_ = mean(len)
) %>%
filter(supp == "OJ")
RMSE <- round(sqrt(mean((data$len - data$pred)^2)), 2)
RMSE_M <- round(sqrt(mean((data$len - data$mean_)^2)), 2)
err <- paste(RMSE, "(", RMSE_M, ")", sep = " ")
p <- data %>%
ggplot(aes(
dose, len
)) +
geom_point(size=5, shape=21) +
geom_line(aes(x=dose, y=intercept+slope),
lwd=1.5, color="gold") +
geom_line(aes(x=dose, y=mean_), color="gray",
lwd = 1.5) +
ylim(range(data$len) + c(-10, 10)) +
ylab("Length") +
xlab("Dose") +
annotate("text", 1.25, y = 40, label = err, size = 10, color = "blue") +
ggpubr::theme_classic2() +
theme(
text = element_text(size = 30)
)
return(p)
}
ex2 <- function(slope_, intercept_){
data <- as_tibble(ToothGrowth) %>%
mutate(
intercept = intercept_,
slope = dose*slope_,
pred = intercept + slope,
mean_ = mean(len)
) %>%
filter(supp == "OJ")
RMSE <- sqrt(mean((data$len - data$pred)^2))
return(RMSE)
}
plan(multisession, workers = 8)
manipulate(plot(1:5, cex=size), size = slider(0.5,10,step=0.5))
manipulate(ex1(intercept_, slope_),
intercept_ = slider(4.2, 33.9, step = 0.1, ticks = FALSE),
slope_ = slider(0, 20, step = 0.1, ticks = FALSE)
)
ex2 <- function(slope_, intercept_){
data <- as_tibble(ToothGrowth) %>%
mutate(
intercept = intercept_,
slope = dose*slope_,
pred = intercept + slope,
mean_ = mean(len)
) %>%
filter(supp == "OJ")
RMSE <- sqrt(mean((data$len - data$pred)^2))
return(RMSE)
}
plan(multisession, workers = 8)
intercept_slope_combinations <- expand_grid(
slope_ = seq(7, 9, by = 0.1),
intercept_ = seq(10, 12, by = 0.1)
) %>%
mutate(rows = row_number()) %>%
group_by(rows) %>%
group_split() %>%
future_map_dfr(., function(X){
return(
tibble(
slope = X$slope_,
intercept = X$intercept_,
RMSE = ex2(X$slope_, X$intercept_))
)
})
minima <- which(intercept_slope_combinations$RMSE == min(intercept_slope_combinations$RMSE))
min_vec <- intercept_slope_combinations[minima, ]
intercept_slope_combinations %>%
ggplot(aes(
slope, intercept, fill = RMSE
)) +
geom_tile(
color = "black"
) +
scale_fill_gradient(
low = "white",
high = "gold"
) +
annotate(
"text",
x = min_vec[[1]], y = min_vec[[2]],
label = "X", color = "red"
) +
ggpubr::theme_pubclean() +
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 16),
legend.position = "none"
) +
ylab("Intercept") +
xlab("Slope") +
scale_x_continuous(breaks = 5:10) +
scale_y_continuous(breaks = 5:10) +
ggtitle(
paste("Slope:", min_vec[[1]],
"Intercept:", min_vec[[2]],
"RMSE:", round(min_vec[[3]]),2)
)
mdl <- lm(
data = data,
len ~ dose
)
data <- as_tibble(ToothGrowth) %>%
filter(supp == "OJ")
data
mdl <- lm(
data = data,
len ~ dose
)
summary(mdl)
plot(sqrt(1:100))
plot(sqrt(1:100), type = "l")
residuals(mdl)
plot(residuals(mdl))
plot(res(mdl))
plot(residuals(mdl))
manipulate(plot(1:5, cex=size), size = slider(0.5,10,step=0.5))
manipulate(ex1(intercept_, slope_),
intercept_ = slider(4.2, 33.9, step = 0.1, ticks = FALSE),
slope_ = slider(0, 20, step = 0.1, ticks = FALSE)
)
summary(mdl)
pacman::p_load(
tidyverse,
ggplot2,
furrr,
nloptr,
crypto2,
splines,
Rcpp
)
# https://stackoverflow.com/questions/47044068/get-the-path-of-current-script
# get path of source file
getCurrentFileLocation <-  function()
{
this_file <- commandArgs() %>%
tibble::enframe(name = NULL) %>%
tidyr::separate(col=value, into=c("key", "value"), sep="=", fill='right') %>%
dplyr::filter(key == "--file") %>%
dplyr::pull(value)
if (length(this_file)==0)
{
this_file <- rstudioapi::getSourceEditorContext()$path
}
return(dirname(this_file))
}
# sets path on source file location
script_path <- getCurrentFileLocation()
setwd(script_path)
crypto_ls <-
crypto2::crypto_list() %>%
filter(name %in% c("Bitcoin", "NEAR Protocol"))
crypto2::crypto_info()
?crypto@
?crypto@
?crypto2
?crypto2::crypto_info
pacman::p_update(crypto2)
install.packages("crypto2")
install.packages("crypto2")
pacman::p_load(
tidyverse,
ggplot2,
furrr,
nloptr,
crypto2,
splines,
Rcpp
)
crypto_ls <-
crypto2::crypto_list() %>%
filter(name %in% c("Bitcoin", "NEAR Protocol"))
crypto_ls <-
crypto2::crypto_list()
View(crypto_ls)
crypto_ls <-
crypto2::crypto_list() %>%
filter(name %in% c("Bitcoin", "NEAR Protocol", "PAX Gold"))
write_rds(crypto_ls, "data/crypto_ls.rds")
return(dirname(this_file))
# https://stackoverflow.com/questions/47044068/get-the-path-of-current-script
# get path of source file
getCurrentFileLocation <-  function()
{
this_file <- commandArgs() %>%
tibble::enframe(name = NULL) %>%
tidyr::separate(col=value, into=c("key", "value"), sep="=", fill='right') %>%
dplyr::filter(key == "--file") %>%
dplyr::pull(value)
if (length(this_file)==0)
{
this_file <- rstudioapi::getSourceEditorContext()$path
}
return(dirname(this_file))
}
# sets path on source file location
script_path <- getCurrentFileLocation()
setwd(script_path)
write_rds(crypto_ls, "data/crypto_ls.rds")
crypto_data <-
crypto2::crypto_history(
read_rds("data/crypto_ls.rds"),
convert = "USD"
)
View(crypto_data)
